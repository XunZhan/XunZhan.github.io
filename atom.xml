<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xun</title>
  
  <subtitle>得时无怠，功不唐捐。</subtitle>
  <link href="https://xunzhan.github.io/atom.xml" rel="self"/>
  
  <link href="https://xunzhan.github.io/"/>
  <updated>2022-10-09T05:30:01.904Z</updated>
  <id>https://xunzhan.github.io/</id>
  
  <author>
    <name>Xun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>16-thress-sum-closest</title>
    <link href="https://xunzhan.github.io/leetcode/16-3sum-closest/"/>
    <id>https://xunzhan.github.io/leetcode/16-3sum-closest/</id>
    <published>2022-10-09T02:01:06.000Z</published>
    <updated>2022-10-09T05:30:01.904Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problems">Problems</h3><p>Given an integer array <code>nums</code> of length n and an integer target, find three integers in <code>nums</code> such that the sum is closest to target.</p><p>Return the sum of the three integers.</p><p>You may assume that each input would have exactly one solution.</p><p><a href="https://leetcode.com/problems/3sum-closest/">Leetcode</a></p><h3 id="Examples">Examples</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [-1,2,1,-4], target = 1</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [0,0,0], target = 1</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).</span><br></pre></td></tr></table></figure><h3 id="Constraints">Constraints</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 &lt;= nums.length &lt;= 1000</span><br><span class="line">-1000 &lt;= nums[i] &lt;= 1000</span><br><span class="line">$$-10^4$$ &lt;= target &lt;= $$10^4$$</span><br></pre></td></tr></table></figure><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8641079999999999em;"></span><span class="strut bottom" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathrm">1</span><span class="mord"><span class="mord mathrm">0</span><span class="vlist"><span style="top:-0.413em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">4</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">(</mo><mi>β</mi><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup><mo>+</mo><mi>c</mi><mrow><mo fence="true">(</mo><msubsup><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mn>3</mn></msubsup><msub><mi>α</mi><mi>n</mi></msub><msub><mi>p</mi><mi>n</mi></msub><mo fence="true">)</mo></mrow><mo fence="true">)</mo></mrow><mi>ψ</mi><mo>(</mo><mi>x</mi><mo separator="true">,</mo><mi>t</mi><mo>)</mo><mo>=</mo><mi>i</mi><mi mathvariant="normal">ℏ</mi><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>ψ</mi><mo>(</mo><mi>x</mi><mo separator="true">,</mo><mi>t</mi><mo>)</mo></mrow><mrow><mi mathvariant="normal">∂</mi><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\left(\beta m c^2 + c \left(\sum_{n=1}^3\alpha_n p_n\right)\right) \psi(x,t)= i\hbar \frac{\partial \psi(x,t)}{\partial t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.8011130000000004em;"></span><span class="strut bottom" style="height:3.068226em;vertical-align:-1.267113em;"></span><span class="base displaystyle textstyle uncramped"><span class="minner displaystyle textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="mord mathit" style="margin-right:0.05278em;">β</span><span class="mord mathit">m</span><span class="mord"><span class="mord mathit">c</span><span class="vlist"><span style="top:-0.413em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mbin">+</span><span class="mord mathit">c</span><span class="minner displaystyle textstyle uncramped"><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="mop op-limits"><span class="vlist"><span style="top:1.1671129999999998em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord mathit">n</span><span class="mrel">=</span><span class="mord mathrm">1</span></span></span></span><span style="top:-0.000005000000000143778em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span><span class="op-symbol large-op mop">∑</span></span></span><span style="top:-1.2500050000000003em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">3</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit" style="margin-right:0.0037em;">α</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.0037em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="mord"><span class="mord mathit">p</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:0em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathit">n</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size4">)</span></span></span><span class="style-wrap reset-textstyle textstyle uncramped" style="top:0em;"><span class="delimsizing size4">)</span></span></span><span class="mord mathit" style="margin-right:0.03588em;">ψ</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mpunct">,</span><span class="mord mathit">t</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit">i</span><span class="mord mathrm">ℏ</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathrm" style="margin-right:0.05556em;">∂</span><span class="mord mathit">t</span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathrm" style="margin-right:0.05556em;">∂</span><span class="mord mathit" style="margin-right:0.03588em;">ψ</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mpunct">,</span><span class="mord mathit">t</span><span class="mclose">)</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></span></p><h3 id="Solutions">Solutions</h3><h4 id="Approach-1">Approach 1</h4><h5 id="Algorithm">Algorithm</h5><h5 id="Complexity">Complexity</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Problems&quot;&gt;Problems&lt;/h3&gt;
&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt; of length n and an integer target, find three integers in &lt;code&gt;</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://xunzhan.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode Template</title>
    <link href="https://xunzhan.github.io/leetcode/leetcode-template/"/>
    <id>https://xunzhan.github.io/leetcode/leetcode-template/</id>
    <published>2022-05-28T07:08:40.000Z</published>
    <updated>2022-10-02T00:36:00.326Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://alyssaq.github.io/stl-complexities/">https://alyssaq.github.io/stl-complexities/</a></p><h3 id="Binary-Search">Binary Search</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> low = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> high = len<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">    <span class="comment">// mid = (low+high)/2 will cause overflow</span></span><br><span class="line">    <span class="type">int</span> mid = low+(high-low)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (nums[mid] == target)</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">        low = mid+<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        high = mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br></pre></td></tr></table></figure><h3 id="Union-Find">Union Find</h3><h4 id="With-Path-Compression">With Path Compression</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; parent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DSU</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        parent = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[x] != x) &#123;</span><br><span class="line">            parent[x] = <span class="built_in">find</span>(parent[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        parent[find[x]] = <span class="built_in">find</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Improved-with-Size">Improved with Size</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; parent;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DSU</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        parent = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n);</span><br><span class="line">        size = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">            size[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[x] != x) &#123;</span><br><span class="line">            parent[x] = <span class="built_in">find</span>(parent[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> rootX = <span class="built_in">Find</span>(x);</span><br><span class="line">        <span class="type">int</span> rootY = <span class="built_in">Find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (rootX == rootY) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (size[rootX] &lt;= size[rootY]) &#123;</span><br><span class="line">            parent[rootX] = rootY;</span><br><span class="line">            size[rootY] += size[rootX];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            parent[rootY] = rootX;</span><br><span class="line">            size[rootX] += soze[rootY];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Improved-with-Rank-Best">Improved with Rank (Best)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; parent;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; rank;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DSU</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        parent = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n);</span><br><span class="line">        rank = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">            rank[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">int</span> <span class="title">Find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[x] != x) &#123;</span><br><span class="line">            parent[x] = <span class="built_in">find</span>(parent[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">Union</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> rootX = <span class="built_in">Find</span>(x);</span><br><span class="line">        <span class="type">int</span> rootY = <span class="built_in">Find</span>(y);</span><br><span class="line">        <span class="keyword">if</span> (rootX == rootY) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rank[rootX] &lt; rank[rootY]) &#123;</span><br><span class="line">            parent[rootX] = rootY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rank[rootX] &gt; rank[rootY]) &#123;</span><br><span class="line">            parent[rootY] = rootX;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            parent[rootX] = rootY;</span><br><span class="line">            rank[rootY] ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Complexity">Complexity</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log* n = </span><br><span class="line">            0, if n &lt;= 1</span><br><span class="line">            1+log*(log n) if n &gt; 1</span><br></pre></td></tr></table></figure><p>log* n is called iterated logarithm.<br>Sort by faster: <code>O(1), O(log* n), O(log n)</code></p><h3 id="Topological-Sort">Topological Sort</h3><h4 id="BFS-Kahn">BFS Kahn</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// N is vertex number, prerequisites is adjacency list</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">bool</span> <span class="title">canTopoSort</span><span class="params">(<span class="type">int</span> N, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; graph;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">indegree</span><span class="params">(N, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;edges.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        graph[edges[i][<span class="number">0</span>]].<span class="built_in">push_back</span>(edges[i][<span class="number">1</span>]);</span><br><span class="line">        indegree[edges[i][<span class="number">1</span>]] ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; queue;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;indegree.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (indegree[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            queue.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!queue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> cur = queue.<span class="built_in">front</span>();</span><br><span class="line">        queue.<span class="built_in">pop</span>();</span><br><span class="line">        count++;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;graph[cur].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            indegree[graph[cur][i]] --;</span><br><span class="line">            <span class="keyword">if</span> (indegree[graph[cur][i]] == <span class="number">0</span>) &#123;</span><br><span class="line">                queue.<span class="built_in">push</span>(graph[cur][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count == N;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Complexity-2">Complexity</h4><p><code>O(E+V)</code></p><h3 id="Dijikstra">Dijikstra</h3><p>本质是贪心算法</p><ol><li>单源 2）无负权图</li></ol><h3 id="Advance-Priority-Queue">Advance (Priority Queue)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">bool</span>&gt; visited;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; distance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">comparator</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; a, <span class="type">const</span> <span class="type">int</span>&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// from small to large</span></span><br><span class="line">        <span class="comment">// also can be: return a &gt; b;</span></span><br><span class="line">            <span class="keyword">return</span> a - b; </span><br><span class="line">        &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// n is vertex number, graph is adjacency list</span></span><br><span class="line"><span class="comment">// graph[i][k] = [j, d]; j is adjacent vertex index, d is dist between i and j</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dijikstra</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> source, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; graph)</span> </span>&#123;</span><br><span class="line">    visited = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">false</span>);</span><br><span class="line">    distance = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, INT_MAX);</span><br><span class="line"></span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;, comparator&gt; pq;</span><br><span class="line">    pq.<span class="built_in">push</span>(source);</span><br><span class="line">    dist[source] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!pq.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> cur = pq.<span class="built_in">front</span>();</span><br><span class="line">        pq.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (visited[cur]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[cur] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> next : graph[cur]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dist[next[<span class="number">0</span>]] &gt; dist[cur]+next[<span class="number">1</span>]) &#123;</span><br><span class="line">                dist[next[<span class="number">0</span>]] = dist[cur]+next[<span class="number">1</span>];</span><br><span class="line">                pq.<span class="built_in">push</span>(next[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Complexity-3">Complexity</h4><p><code>O(ElogV)</code></p><h3 id="Sort">Sort</h3><p><a href="https://www.youtube.com/watch?v=S5yuwp3-r20">动画</a></p><h4 id="Bubble-Sort">Bubble Sort</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n<span class="number">-1</span>-i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] &gt; nums[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(nums, j, j+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Selection-Sort">Selection Sort</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectionSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> minIdx = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i+<span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] &lt; nums[minIdx]) &#123;</span><br><span class="line">                minIdx = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(nums, i, minIdx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Insertion-Sort">Insertion Sort</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertionSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="type">int</span> tmp = nums[i];</span><br><span class="line">        <span class="type">int</span> j = i;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; nums[j<span class="number">-1</span>] &gt; tmp) &#123;</span><br><span class="line">            nums[j] = nums[j<span class="number">-1</span>];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        nums[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Merge-Sort">Merge Sort</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">divide</span>(nums, <span class="number">0</span>, nums.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">divide</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> [</span></span><br><span class="line"><span class="function">    <span class="title">if</span> <span class="params">(left &gt;= right)</span> <span class="keyword">return</span></span>;</span><br><span class="line">    <span class="type">int</span> mid = left + (right-left)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">divide</span>(nums, left, mid);</span><br><span class="line">    <span class="built_in">divide</span>(nums, mid+<span class="number">1</span>, right);</span><br><span class="line">    <span class="built_in">merge</span>(nums, left, right);</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merger</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = left + (right-left)/<span class="number">2</span>;</span><br><span class="line">    <span class="function">vectot&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(right - left +<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span> i = left, j = mid+<span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &lt; nums[j]) &#123;</span><br><span class="line">            tmp[k] = nums[i];</span><br><span class="line">            i++;</span><br><span class="line">            k++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp[k] = nums[j];</span><br><span class="line">            j++;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123;</span><br><span class="line">        tmp[k] = nums[i];</span><br><span class="line">        i++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(j &lt;= right) &#123;</span><br><span class="line">        tmp[k] = nums[j];</span><br><span class="line">        j++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">        nums[i] = tmp[i - left];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Quick-Sort">Quick Sort</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">helper</span>(nums, <span class="number">0</span>, nums.<span class="built_in">length</span>()<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">helper</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &gt;= right) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> pivot = <span class="built_in">partition</span>(nums, left, right);</span><br><span class="line">    <span class="built_in">helper</span>(nums, left, pivot<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">helper</span>(nums, pivot+<span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> pivot = nums[right];</span><br><span class="line">    <span class="type">int</span> wall = left;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = left; i &lt; right; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &lt; pivot) &#123;</span><br><span class="line">            <span class="built_in">swap</span>(nums, i, wall);</span><br><span class="line">            wall++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(nums, wall, right);</span><br><span class="line">    <span class="keyword">return</span> wall;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Quick-Select-Not-a-sorting-method">Quick Select (Not a sorting method!!!)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">quickSelect</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> pivot = <span class="built_in">partition</span>(nums, left, right);</span><br><span class="line">        <span class="keyword">if</span> (pivot == k) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (pivot &lt; k) &#123;</span><br><span class="line">            left = pivot+<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = pivot<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">begin</span>()+k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>complexity: O(n)</p><h4 id="Bucket-Sort">Bucket Sort</h4><p>sort by frequency</p><h4 id="Counting-Sort">Counting Sort</h4><p>counting sort is not a comparison sort</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">countingSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> minNum = *<span class="built_in">min_element</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> maxNum = *<span class="built_in">max_element</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> shift = -minNum;</span><br><span class="line">    <span class="type">int</span> n = maxNum - minNum + <span class="number">1</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">frequency</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : nums) &#123;</span><br><span class="line">        frequency[i+shift]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (frequency[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j&lt;frequency[i]; j++) &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(i-shift);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Complexity-4">Complexity</h5><p>Time: <code>O(n+k)</code> <code>n</code> is number of elements, <code>k</code> is the range of the elements<br>Space: <code>O(n+k)</code></p><h4 id="Heap-Sort">Heap Sort</h4><h3 id="Monotonic-Stack-increase">Monotonic Stack (increase)</h3><h4 id="反向-可以只保存数字">反向 可以只保存数字</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreaterElement1</span><span class="params">(vector&lt;<span class="type">int</span>&gt; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">length</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stack;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!stack.<span class="built_in">empty</span>() &amp;&amp; nums[i] &gt; stack.<span class="built_in">top</span>()) &#123;</span><br><span class="line">            stack.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        ans[i] = (stack.<span class="built_in">empty</span>()) ? <span class="number">-1</span> : stack.<span class="built_in">top</span>();</span><br><span class="line">        stack.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="正向-必须要保存之前的index因为之后会用到">正向 必须要保存之前的index因为之后会用到</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nextGreaterElement2</span><span class="params">(vector&lt;<span class="type">int</span>&gt; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">length</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(n, <span class="number">-1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stack;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!stack.<span class="built_in">empty</span>() &amp;&amp; nums[i] &gt; nums[stack.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">            <span class="type">int</span> idx = stack.<span class="built_in">top</span>();</span><br><span class="line">            stack.<span class="built_in">pop</span>();</span><br><span class="line">            ans[idx] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        stack.<span class="built_in">push</span>(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Trie">Trie</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Trie* next[<span class="number">26</span>] = &#123;&#125;;</span><br><span class="line">    <span class="type">bool</span> isword = <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Trie</span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        Trie* node = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : word) &#123;</span><br><span class="line">            ch -= <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (!node-&gt;next[ch]) &#123;</span><br><span class="line">                node-&gt;next[ch] = <span class="keyword">new</span> <span class="built_in">Trie</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next[ch];</span><br><span class="line">        &#125;</span><br><span class="line">        node-&gt;isword = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(string word)</span> </span>&#123;</span><br><span class="line">        Trie* node = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : word) &#123;</span><br><span class="line">            ch -= <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (!node-&gt;next[ch]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next[ch];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node-&gt;isword;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">startsWith</span><span class="params">(string prefix)</span> </span>&#123;</span><br><span class="line">        Trie* node = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : prefix) &#123;</span><br><span class="line">            ch -= <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (!node-&gt;next[ch]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next[ch];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://alyssaq.github.io/stl-complexities/&quot;&gt;https://alyssaq.github.io/stl-complexities/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Binary-Search&quot;&gt;Binary S</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://xunzhan.github.io/categories/Leetcode/"/>
    
    
    <category term="Template" scheme="https://xunzhan.github.io/tags/Template/"/>
    
  </entry>
  
  <entry>
    <title>{235, 236, 1644, 1650, 1676} Lowest Common Ancestor of a Binary Tree</title>
    <link href="https://xunzhan.github.io/leetcode/235-236-1644-1650-1676-lowest-common-ancestor-of-a-binary-tree/"/>
    <id>https://xunzhan.github.io/leetcode/235-236-1644-1650-1676-lowest-common-ancestor-of-a-binary-tree/</id>
    <published>2022-05-16T06:34:29.000Z</published>
    <updated>2022-05-22T03:47:10.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree">235  Lowest Common Ancestor of a Binary Search Tree</h2><h3 id="Problems">Problems</h3><p>Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.</p><p>[]</p><h3 id="Examples">Examples</h3><p>put example here</p><h3 id="Constraints">Constraints</h3><p>put constraints here</p><h3 id="Solutions">Solutions</h3><h4 id="Approach-1">Approach 1</h4><h5 id="Algorithm">Algorithm</h5><h5 id="Complexity">Complexity</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree&quot;&gt;235  Lowest Common Ancestor of a Binary Search Tree&lt;/h2&gt;
&lt;h3 id=&quot;Problems&quot;&gt;Probl</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://xunzhan.github.io/categories/Leetcode/"/>
    
    
    <category term="Binary Tree" scheme="https://xunzhan.github.io/tags/Binary-Tree/"/>
    
  </entry>
  
  <entry>
    <title>124. Binary Tree Maximum Path Sum</title>
    <link href="https://xunzhan.github.io/leetcode/124-binary-tree-maximum-path-sum/"/>
    <id>https://xunzhan.github.io/leetcode/124-binary-tree-maximum-path-sum/</id>
    <published>2022-05-10T06:06:28.000Z</published>
    <updated>2022-05-22T03:46:51.003Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problems">Problems</h3><p>A <strong>path</strong> in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence <strong>at most once</strong>. Note that the path does not need to pass through the root.</p><p>The path <strong>sum of a path</strong> is the sum of the node’s values in the path.</p><p>Given the <code>root</code> of a binary tree, return the maximum path <strong>sum</strong> of any <strong>non-empty path</strong>.</p><h3 id="Examples">Examples</h3><p><img src="images/leetcode/lc-124-1.jpg" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: root = [1,2,3]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: The optimal path is 2 -&gt; 1 -&gt; 3 with a path sum of 2 + 1 + 3 = 6.</span><br></pre></td></tr></table></figure><h3 id="Constraints">Constraints</h3><p>put constraints here</p><h3 id="Solutions">Solutions</h3><h4 id="Approach-1">Approach 1</h4><h5 id="Algorithm">Algorithm</h5><h5 id="Complexity">Complexity</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Problems&quot;&gt;Problems&lt;/h3&gt;
&lt;p&gt;A &lt;strong&gt;path&lt;/strong&gt; in a binary tree is a sequence of nodes where each pair of adjacent nodes in the </summary>
      
    
    
    
    <category term="Leetcode" scheme="https://xunzhan.github.io/categories/Leetcode/"/>
    
    
    <category term="Binary Tree" scheme="https://xunzhan.github.io/tags/Binary-Tree/"/>
    
  </entry>
  
  <entry>
    <title>152. Maximum Product Subarray</title>
    <link href="https://xunzhan.github.io/leetcode/152-maximum-product-subarray/"/>
    <id>https://xunzhan.github.io/leetcode/152-maximum-product-subarray/</id>
    <published>2022-04-30T22:12:32.000Z</published>
    <updated>2022-05-22T03:46:59.527Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problems">Problems</h3><p>Given a <strong>1-indexed</strong> array of integers numbers that is already sorted in <strong>non-decreasing order</strong>, find two numbers such that they add up to a specific target number. Let these two numbers be <code>numbers[index1]</code> and <code>numbers[index2]</code> where <code>1 &lt;= index1 &lt; index2 &lt;= numbers.length</code>.</p><p>Return the indices of the two numbers, <code>index1</code> and <code>index2</code>, added by one as an integer array <code>[index1, index2]</code> of length 2.</p><p>The tests are generated such that there is exactly one solution. You may not use the same element twice.</p><p>Your solution must use only constant extra space.</p><h3 id="Examples">Examples</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: numbers = [2,7,11,15], target = 9</span><br><span class="line">Output: [1,2]</span><br><span class="line">Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: numbers = [2,3,4], target = 6</span><br><span class="line">Output: [1,3]</span><br><span class="line">Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].</span><br></pre></td></tr></table></figure><h3 id="Constraints">Constraints</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2 &lt;= numbers.length &lt;= 3 * 104</span><br><span class="line">-1000 &lt;= numbers[i] &lt;= 1000</span><br><span class="line">numbers is sorted in non-decreasing order.</span><br><span class="line">-1000 &lt;= target &lt;= 1000</span><br><span class="line">The tests are generated such that there is exactly one solution.</span><br></pre></td></tr></table></figure><h3 id="Solutions">Solutions</h3><h4 id="Two-Pointers">Two Pointers</h4><p>We use two indices, initially pointing to the first and the last element, respectively. Compare the sum of these two elements with target. If the sum is equal to target, we found the exactly only solution. If it is less than target, we increase the smaller index by one. If it is greater than target, we decrease the larger index by one. Move the indices and repeat the comparison until the solution is found.</p><h5 id="Algorithm">Algorithm</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; numbers, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> high = numbers.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="type">int</span> sum = numbers[low] + numbers[high];</span><br><span class="line">                        </span><br><span class="line">        <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;low + <span class="number">1</span>, high + <span class="number">1</span>&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">            ++low;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            --high;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// In case there is no solution</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Complexity">Complexity</h5><p>Time: <code>O(n)</code><br>Space: <code>O(1)</code></p><h5 id="Follow-Up">Follow Up</h5><p>What if the problem constraints were different and we needed to consider integer overflow when adding <code>numbers[low]</code> and <code>numbers[high]</code>? In that case, to prevent an overflow error, we could cast our numbers from int data type to long data type before adding them together, e.g.: <code>long sum = static_cast&lt;long&gt;(numbers[low]) + numbers[high]</code> for C++. Casting ensures that we will not get the overflow error since the signed long data type supports numbers up to <code>2^63 - 1</code>. Alternatively, if we cannot use long integers, then we can check if <code>numbers[low] &gt; (1 &lt;&lt; 31) - 1 - numbers[high]</code> at the beginning of each iteration. If this condition is true, then <code>numbers[low] + numbers[high]</code> will result in integer overflow, and so we would move the larger index to the left.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Problems&quot;&gt;Problems&lt;/h3&gt;
&lt;p&gt;Given a &lt;strong&gt;1-indexed&lt;/strong&gt; array of integers numbers that is already sorted in &lt;strong&gt;non-decrea</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://xunzhan.github.io/categories/Leetcode/"/>
    
    
    <category term="Array" scheme="https://xunzhan.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>15. Three Sum</title>
    <link href="https://xunzhan.github.io/leetcode/15-three-sum/"/>
    <id>https://xunzhan.github.io/leetcode/15-three-sum/</id>
    <published>2022-04-30T21:57:47.000Z</published>
    <updated>2022-10-09T05:01:15.801Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problems">Problems</h3><p>Given an integer array <code>nums</code>, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j, i != k, and j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p><p>Notice that the solution set must not contain duplicate triplets.</p><h3 id="Examples">Examples</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [-1,0,1,2,-1,-4]</span><br><span class="line">Output: [[-1,-1,2],[-1,0,1]]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [0]</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure><h3 id="Constraints">Constraints</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0 &lt;= nums.length &lt;= 3000</span><br><span class="line">-10^5 &lt;= nums[i] &lt;= 10^5</span><br></pre></td></tr></table></figure><h3 id="Solutions">Solutions</h3><h4 id="Two-Pointers">Two Pointers</h4><p>We will follow the same two pointers pattern as in <a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/">Two Sum II</a>. It requires the array to be sorted, so we’ll do that first. As our BCR is <code>O(n^2)</code>, sorting the array would not change the overall time complexity.</p><p>To make sure the result contains unique triplets, we need to skip duplicate values. It is easy to do because repeating values are next to each other in a sorted array.</p><p>After sorting the array, we move our pivot element <code>nums[i]</code> and analyze elements to its right. We find all pairs whose sum is equal <code>-nums[i]</code> using the two pointers pattern, so that the sum of the pivot element (<code>nums[i]</code>) and the pair (<code>-nums[i]</code>) is equal to zero.</p><h5 id="Algorithm">Algorithm</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(<span class="built_in">begin</span>(nums), <span class="built_in">end</span>(nums));</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>() &amp;&amp; nums[i] &lt;= <span class="number">0</span>; ++i)</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || nums[i - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">                <span class="built_in">twoSumII</span>(nums, i, res);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">twoSumII</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> i, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;res)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> lo = i + <span class="number">1</span>, hi = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">            <span class="type">int</span> sum = nums[i] + nums[lo] + nums[hi];</span><br><span class="line">            <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                ++lo;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                --hi;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(&#123; nums[i], nums[lo++], nums[hi--] &#125;);</span><br><span class="line">                <span class="keyword">while</span> (lo &lt; hi &amp;&amp; nums[lo] == nums[lo - <span class="number">1</span>])</span><br><span class="line">                    ++lo;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>More readable version:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">    </span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="comment">// fix 3 index &#123;i,j,k&#125;, i&lt;j&lt;k, in case we have duplicates</span></span><br><span class="line">        <span class="comment">// i -&gt; i, j -&gt; low, k -&gt; high</span></span><br><span class="line">        <span class="type">int</span> low = i+<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> high = nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// two sum ii solution</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="type">int</span> sum = nums[i] + nums[low] + nums[high];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                low ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                high --;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(&#123;nums[i], nums[low], nums[high]&#125;));</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// remove duplicates for j, also need to move it to next different num</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    low ++;</span><br><span class="line">                &#125; <span class="keyword">while</span> (low &lt; nums.<span class="built_in">size</span>() &amp;&amp; nums[low] == nums[low<span class="number">-1</span>]);</span><br><span class="line">                <span class="comment">// remove duplicates for k, also need to move it to next different num</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    high --;</span><br><span class="line">                &#125; <span class="keyword">while</span> (high&gt;=<span class="number">0</span> &amp;&amp; nums[high] == nums[high+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// remove duplicates for i</span></span><br><span class="line">        <span class="keyword">while</span> (i+<span class="number">1</span>&lt;nums.<span class="built_in">size</span>() &amp;&amp; nums[i] == nums[i+<span class="number">1</span>]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Complexity">Complexity</h5><p>Time: <code>O(n^2)</code><br>Space: from <code>O(n)</code> to <code>O(n·logn)</code>, depending on the implementation of the sorting algorithm. For the purpose of complexity analysis, we ignore the memory required for the output.</p><h5 id="Follow-Up">Follow Up</h5><p>其实<code>remove duplicates for k</code>这个部分不需要。当我们移动<code>j</code>的位置时，必然保证之后对于同样的<code>k</code>，一定不是符合<code>sum=0</code>的答案，会直接跳过。</p><h4 id="Hashset">Hashset</h4><p>Since triplets must sum up to the target value, we can try the hash table approach from the <a href="https://leetcode.com/problems/two-sum/">Two Sum</a> solution. This approach won’t work, however, if the sum is not necessarily equal to the target, like in <a href="https://leetcode.com/problems/3sum-smaller/">3Sum Smaller</a> and <a href="https://leetcode.com/problems/3sum-closest/">3Sum Closest</a>.</p><p>We move our pivot element <code>nums[i]</code> and analyze elements to its right. We find all pairs whose sum is equal <code>-nums[i]</code> using the Two Sum: One-pass Hash Table approach, so that the sum of the pivot element (<code>nums[i]</code>) and the pair (<code>-nums[i]</code>) is equal to zero.</p><p>To do that, we process each element <code>nums[j]</code> to the right of the pivot, and check whether a complement <code>-nums[i] - nums[j]</code> is already in the hashset. If it is, we found a triplet. Then, we add <code>nums[j]</code> to the hashset, so it can be used as a complement from that point on.</p><p>Like in the approach above, we will also sort the array so we can skip repeated values. We provide a different way to avoid duplicates in the <a href="#no-sort">No-Sort</a> approach below.</p><h5 id="Algorithm-2">Algorithm</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">    <span class="built_in">sort</span>(<span class="built_in">begin</span>(nums), <span class="built_in">end</span>(nums));</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>() &amp;&amp; nums[i] &lt;= <span class="number">0</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span> || nums[i - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">            <span class="built_in">twoSum</span>(nums, i, res);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> i, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;res)</span> </span>&#123;</span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; seen;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">        <span class="type">int</span> complement = -nums[i] - nums[j];</span><br><span class="line">        <span class="keyword">if</span> (seen.<span class="built_in">count</span>(complement)) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(&#123;nums[i], complement, nums[j]&#125;);</span><br><span class="line">            <span class="keyword">while</span> (j + <span class="number">1</span> &lt; nums.<span class="built_in">size</span>() &amp;&amp; nums[j] == nums[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                ++j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        seen.<span class="built_in">insert</span>(nums[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Complexity-2">Complexity</h5><p>Time: <code>O(n^2)</code><br>Space: <code>O(n)</code> for the hash set.</p><h4 id="No-Sort">No Sort</h4><p>What if you cannot modify the input array, and you want to avoid copying it due to memory constraints?</p><p>We can adapt the hashset approach above to work for an unsorted array. We can put a combination of three values into a hashset to avoid duplicates. Values in a combination should be ordered (e.g. ascending). Otherwise, we can have results with the same values in the different positions.</p><h5 id="Algorithm-3">Algorithm</h5><p>The algorithm is similar to the hashset approach above. We just need to add few optimizations so that it works efficiently for repeated values:</p><ul><li><p>Use another hashset dups to skip duplicates in the outer loop. Without this optimization, the submission will time out for the test case with 3,000 zeroes. This case is handled naturally when the array is sorted.</p></li><li><p>Instead of re-populating a hashset every time in the inner loop, we can use a hashmap and populate it once. Values in the hashmap will indicate whether we have encountered that element in the current iteration. When we process <code>nums[j]</code> in the inner loop, we set its hashmap value to <code>i</code>. This indicates that we can now use <code>nums[j]</code> as a complement for <code>nums[i]</code>.</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">    set&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; dups;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; seen;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        <span class="keyword">if</span> (dups.<span class="built_in">insert</span>(nums[i]).second) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">                <span class="type">int</span> complement = -nums[i] - nums[j];</span><br><span class="line">                <span class="keyword">auto</span> it = seen.<span class="built_in">find</span>(complement);</span><br><span class="line">                <span class="keyword">if</span> (it != <span class="built_in">end</span>(seen) &amp;&amp; it-&gt;second == i) &#123;</span><br><span class="line">                    vector&lt;<span class="type">int</span>&gt; triplet = &#123;nums[i], nums[j], complement&#125;;</span><br><span class="line">                    <span class="built_in">sort</span>(<span class="built_in">begin</span>(triplet), <span class="built_in">end</span>(triplet));</span><br><span class="line">                    res.<span class="built_in">insert</span>(triplet);</span><br><span class="line">                &#125;</span><br><span class="line">                seen[nums[j]] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(<span class="built_in">begin</span>(res), <span class="built_in">end</span>(res));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Complexity-3">Complexity</h5><p>Time: <code>O(n^2)</code> We have outer and inner loops, each going through <code>n</code> elements.<br>While the asymptotic complexity is the same, this algorithm is noticeably slower than the previous approach. Lookups in a hashset, though requiring a constant time, are expensive compared to the direct memory access.</p><p>Space: <code>O(n)</code> for the hashset/hashmap.<br>For the purpose of complexity analysis, we ignore the memory required for the output. However, in this approach we also store output in the hashset for deduplication. In the worst case, there could be <code>O(n^2)</code> triplets in the output, like for this example: <code>[-k, -k + 1, ..., -1, 0, 1, ... k - 1, k]</code>. Adding a new number to this sequence will produce <code>n / 3</code> new triplets.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Problems&quot;&gt;Problems&lt;/h3&gt;
&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt;, return all the triplets &lt;code&gt;[nums[i], nums[j], nums[k]]&lt;/code</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://xunzhan.github.io/categories/Leetcode/"/>
    
    
    <category term="Array" scheme="https://xunzhan.github.io/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Hexo NexT Customize Settings</title>
    <link href="https://xunzhan.github.io/techblog/hexo-next-customize/"/>
    <id>https://xunzhan.github.io/techblog/hexo-next-customize/</id>
    <published>2022-04-27T06:47:53.000Z</published>
    <updated>2022-10-02T07:12:36.552Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Code-Block-Toolbar">Code Block Toolbar</h3><h4 id="Problem">Problem</h4><p>The prism plugin in for next does not offer the toolbox, it only supports the copy-tp-clipboard button. But for blogs with large content, they can be more readable with show/hide codes.</p><p>The problem is adding a button to show/hide code blocks in blogs. Note that code blocks will not only be used for codes. For example, in leetcode blogs, I use code blocks to display test cased and explanations.</p><h4 id="Assumptions">Assumptions</h4><ol><li>Real codes will have its programming language mentioned after the code block prompt. And the real codes can be displayed or hidden.</li><li>For all other use cases, I will not mentioned the programming language and they cannot be hidden.</li></ol><h4 id="Solutions">Solutions</h4><ol><li>Register a drop down action <code>registerCodeWithDropDown</code> in NexT’s global JS handlers <code>next/source/js/next-boot.js</code>.</li><li>Implement the action in <code>next/source/js/utils.js</code>. In NexT, all the code and code blocks are wrapped inside a <code>&lt;figure&gt;</code> element, with the programming language marked or <code>plaintext</code> for unmentioned code blocks.</li><li>For all the elements that has the programming language marked, we wrap the codes in a <code>&lt;details&gt;</code>. This will create a drop down button and I name the button using the language and add to the <code>&lt;summary&gt;</code> element. All names will be transferred to <strong>upper case</strong>.</li><li>The structure comparison of plaintext and real codes are as follow:<br>Plaintext:</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span> <span class="attr">class</span>=<span class="string">&quot;highlight plaintext&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;table-container&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;copy-btn&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-copy fa-fw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure><p>C++ code block:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">class</span>=<span class="string">&quot;note info no-icon&quot;</span> <span class="attr">open</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">summary</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>CPP<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">figure</span> <span class="attr">class</span>=<span class="string">&quot;highlight cpp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;table-container&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;copy-btn&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-copy fa-fw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Support-Emoji">Support Emoji</h3><h4 id="Problem-2">Problem</h4><p>The default renderer in Hexo is <code>hexo-renderer-marked</code>, which does not support adding emoji in markdown. The problem is find a render to support emoji for Hexo.</p><h4 id="Solutions-2">Solutions</h4><ol><li><p><s>Tried to find emoji-friendly plugin <a href="https://github.com/crimx/hexo-filter-github-emojis">hexo-filter-github-emojis</a></s> <strong>Not working.</strong> Tested with NexT theme, will affect the <code>live2d-widget</code> display, its special characters in js files will also be escaped and thus throw bugs in the console.</p></li><li><p><s>Find a new rendered for hexo markdown <a href="https://github.com/CHENXCHEN/hexo-renderer-markdown-it-plus">hexo-renderer-markdown-it-plus</a></s> <strong>Is risky.</strong> Git repository is not well maintained, with many issue unresolved.</p></li><li><p>Use the <a href="https://github.com/hexojs/hexo-renderer-markdown-it">hexo-renderer-markdown-it</a>, a faster and CommonMark compliant alternative for Hexo.</p></li><li><p>Install new renderer.</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/hexo</span><br><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-markdown-it --save</span><br></pre></td></tr></table></figure><ol start="2"><li>Add config for the new renderer.</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line"><span class="attr">preset:</span> <span class="string">&#x27;default&#x27;</span></span><br><span class="line"><span class="attr">render:</span></span><br><span class="line">  <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">langPrefix:</span> <span class="string">&#x27;language-&#x27;</span></span><br><span class="line">  <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">typographer:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">quotes:</span> <span class="string">&#x27;“”‘’&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="TODO">TODO</h3><p>live2d 在鼠标碰到link的时候都会触发message，增加一个判断，不要每次都出发（概率触发弹窗）</p><h3 id="Font-Size">Font Size</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Code-Block-Toolbar&quot;&gt;Code Block Toolbar&lt;/h3&gt;
&lt;h4 id=&quot;Problem&quot;&gt;Problem&lt;/h4&gt;
&lt;p&gt;The prism plugin in for next does not offer the toolbox</summary>
      
    
    
    
    <category term="Techblog" scheme="https://xunzhan.github.io/categories/Techblog/"/>
    
    
    <category term="NexT" scheme="https://xunzhan.github.io/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>560. Subarray Sum Equals K</title>
    <link href="https://xunzhan.github.io/leetcode/560-subarray-sum-equals-k/"/>
    <id>https://xunzhan.github.io/leetcode/560-subarray-sum-equals-k/</id>
    <published>2022-04-26T15:40:08.000Z</published>
    <updated>2022-05-22T03:47:19.296Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problems">Problems</h3><p>Given an array of integers nums and an integer <code>k</code>, return the total number of subarrays whose sum equals to <code>k</code>.</p><h3 id="Examples">Examples</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,1,1], k = 2</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,2,3], k = 3</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><h3 id="Constraints">Constraints</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 &lt;= nums.length &lt;= 2 * 10^4</span><br><span class="line">-1000 &lt;= nums[i] &lt;= 1000</span><br><span class="line">-10^7 &lt;= k &lt;= 10^7</span><br></pre></td></tr></table></figure><h3 id="Solutions">Solutions</h3><h4 id="Brute-Force">Brute Force</h4><p>The simplest method is to consider every possible subarray of the given <code>nums</code> array, find the sum of the elements of each of those subarrays and check for the equality of the sum obtained with the given <code>k</code>. Whenever the sum equals <code>k</code>, we can increment the <code>count</code> used to store the required result.</p><h5 id="Algorithm">Algorithm</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subarraySum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>; start &lt; nums.length; start++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> start + <span class="number">1</span>; end &lt;= nums.length; end++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; end; i++)</span><br><span class="line">                    sum += nums[i];</span><br><span class="line">                <span class="keyword">if</span> (sum == k)</span><br><span class="line">                    count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="Complexity">Complexity</h5><p>Time: <code>O(n^3)</code><br>Space: <code>O(1)</code></p><h4 id="Cumulative-Sum">Cumulative Sum</h4><p>Let <code>sum[i] = sum from index 0to i</code>. When we need subarray sum from <code>i</code> to <code>j</code>, we can calculate it using <code>sum[j] - sum[i] + nums[i]</code>.</p><h4 id="Algorithm-2">Algorithm</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">subarraySum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i&lt;n; i++) &#123;</span><br><span class="line">            dp[i] = dp[i<span class="number">-1</span>] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j&lt;n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dp[j] - dp[i] + nums[i] == k) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">                    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="Complexity-2">Complexity</h5><p>Time: <code>O(n)</code><br>Space: <code>O(n)</code></p><h4 id="Hash-Map">Hash Map</h4><h5 id="Algorithm-3">Algorithm</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">subarraySum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; map;</span><br><span class="line">    map[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">        sum+=nums[i];</span><br><span class="line">        <span class="keyword">if</span> (map.<span class="built_in">count</span>(sum-k)) &#123;</span><br><span class="line">            res+=map[sum-k];</span><br><span class="line">        &#125;</span><br><span class="line">        map[sum]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subarraySum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    HashMap &lt; Integer, Integer &gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span> &lt; &gt; ();</span><br><span class="line">    map.put(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(sum - k))</span><br><span class="line">            count += map.get(sum - k);</span><br><span class="line">        map.put(sum, map.getOrDefault(sum, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Complexity-3">Complexity</h5><p>Time: <code>O(n)</code> ? C++ map insert might be O(n)<br>Space: <code>O(n)</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Problems&quot;&gt;Problems&lt;/h3&gt;
&lt;p&gt;Given an array of integers nums and an integer &lt;code&gt;k&lt;/code&gt;, return the total number of subarrays whose</summary>
      
    
    
    
    <category term="Leetcode" scheme="https://xunzhan.github.io/categories/Leetcode/"/>
    
    
    <category term="Array" scheme="https://xunzhan.github.io/tags/Array/"/>
    
    <category term="Dynamic Programming" scheme="https://xunzhan.github.io/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>2021 年度报告</title>
    <link href="https://xunzhan.github.io/articles/2021-annual-report/"/>
    <id>https://xunzhan.github.io/articles/2021-annual-report/</id>
    <published>2022-04-24T05:52:11.000Z</published>
    <updated>2022-05-22T03:43:43.729Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2021年的总结">2021年的总结</h3><p>终于有时间静下心来写关于去年的总结了。在去年的年底结束了长达十多年的学生的身份，难过肯定是有的，但是我也终于意识到我不可能永远借用这样的身份，说是借口或许更加贴切，来完成我的一生。为了给自己留点面子，也为了让年度报告有机会出些续集，把好事坏事分开来说吧。</p><p>如果只用一个词语概括2021，那就是“混乱”。在“最后一学期了好好放纵”和“还有最后一门课为了gpa还得把作业凑出来拿个过得去的分”的矛盾里，我没有效率地写作业，玩不好也学不好，最后反而草草毕业一片狼藉。在“我拿到了return offer不用担心工作”和“收到其他想要尝试的面试但是马上要回国度假”的矛盾里，我把面试做了一半，然后把之前的准备抛在脑后回家当了两个月的米虫。在“发现了我之后想要努力的方向”和“这个方向的就业前景不如general sde好且对数学物理基础要求极高”的矛盾里，我放弃了继续深入研究然后在步入社会之后抱怨还是我的初心最好。</p><p>现在看来，我几乎是在每一个关键点都完美地做出错误的选择。</p><p>这些问题归根结底，都是对于自己能力的不自信和对未来的规划不明确导致的。在过去的两年，我刚刚学会了“尝试不要去逃避困难”这件事情，which is 大部分正常人都有的思想觉悟。我被保护的太好了，我并不忌讳承认这点，很少体会到真正的失败和无力是什么感觉。离开家人之后，我才意识到独立并不仅仅是敢于一个人在夜晚睡觉或是自己可以烧一顿好吃的饭（虽然这对我来说已经是迈出很大一步），独立是在充满暗礁与漩涡的现实里，即使没有罗盘，也从不放弃掌舵，也依然清楚自己的航向。</p><p>关于规划不明确的解决办法，我已经知道自己在未来一年内都要尝试的方向，并且努力去求职相关的工作岗位，目前已经在准备简历和知识储备。关于对于能力不自信的解决办法，我必须要更加努力的学习，毋庸置疑，前两年的最好的学习时间我几乎浪费了一半。当我可以向不相关领域的人介绍本领域的基本体系和workflow的时候，那会是一个新的阶段。如果要达到，我必须更多的涉猎相关的书籍，有能力完成深入的学习。最重要的，重新训练独立思考的能力。网络上遍布唾手可得的资源，而我已经对“思考”这件事情放弃了关注。然而无论是生活上的懒还是思想上的懒，对于我做为一个“人”的存在，都是致命的。</p><p>坏事说完了。可以说说好事，虽然并不多。我终于和爸爸妈妈团聚，从隔离酒店出来的时候，妈妈和我都是跑着去拥抱对方，妈妈说她没哭，但我觉得她只是忍着没哭而已，和我一样。还有看到爸爸和奶奶都很开心，在家里睡了两年来从没有过的好觉。我会感觉回家永远是一个正确的决定，也是我这两年最开心的时刻，是的，我确信这比我拿了return offer更值得高兴。我希望家人们都可以平平安安健健康康的，疫情快一些过去，如果可以的话。</p><h3 id="一些无关理性的话">一些无关理性的话</h3><p>我开始体会到作为一个独立的人痛苦，我也相信这只是折磨的开始。梦想和现实从来就不是榫卯，而是两张砂纸，在无数次撕扯与摩擦里，我逐渐感受到热量。他灼烧着我，我也觉得痛苦，但我奇怪得想要去享受…这会让我觉得我是一个客观存在的个体，经历过挣扎的痕迹才是对我的存在的肯定，并且使我拥有带着力量的美感。当我明白真正想要的是什么时，才能做到真正的包容。</p><h3 id="2022年的计划">2022年的计划</h3><p>我没有很好的自控力，作为第一篇年度报告的计划部分，太宏观或者模糊的目标都会使我执行起来更加困难，从而导致放弃。所以我决定列举出数量合适的具体操作，按照priority从高到低排序：</p><ol><li>规律作息，十二点前睡觉。</li><li>少刷短视频，尝试完成一些长篇和深度的阅读。</li><li>每周完成3-5个lc。</li><li>多关心自己的亲人，能够和他们通话时请不要拖延。</li></ol><p>关于4，并不是说家人不重要，而是目前需要完善的地方相较前几条更少。有些时候被琐事困扰，既不想和他们分享烦恼又需要自己的空间，导致了沟通的时间变少。今年希望我可以做到也多关心家人的生活，能够多和他们聊会儿天对他们来说就已经是一件很开心的事情了：）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;2021年的总结&quot;&gt;2021年的总结&lt;/h3&gt;
&lt;p&gt;终于有时间静下心来写关于去年的总结了。在去年的年底结束了长达十多年的学生的身份，难过肯定是有的，但是我也终于意识到我不可能永远借用这样的身份，说是借口或许更加贴切，来完成我的一生。为了给自己留点面子，也为了让年</summary>
      
    
    
    
    <category term="Articles" scheme="https://xunzhan.github.io/categories/Articles/"/>
    
    
    <category term="年度报告" scheme="https://xunzhan.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>42. Trapping Rain Water</title>
    <link href="https://xunzhan.github.io/leetcode/42-trapping-rain-water/"/>
    <id>https://xunzhan.github.io/leetcode/42-trapping-rain-water/</id>
    <published>2022-04-21T06:23:17.000Z</published>
    <updated>2022-05-22T03:46:43.234Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problems">Problems</h3><p>Given <code>n</code> non-anegative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining.</p><p><a href="https://leetcode.com/problems/trapping-rain-water/">Leetcode</a></p><h3 id="Examples">Examples</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: </span><br><span class="line">The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. </span><br><span class="line">In this case, 6 units of rain water (blue section) are being trapped.</span><br><span class="line"></span><br><span class="line">Input: height = [4,2,0,3,2,5]</span><br><span class="line">Output: 9</span><br></pre></td></tr></table></figure><h3 id="Constraints">Constraints</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n == height.length</span><br><span class="line">1 &lt;= n &lt;= 2 * 10^4</span><br><span class="line">0 &lt;= height[i] &lt;= 10^5</span><br></pre></td></tr></table></figure><h3 id="Solutions">Solutions</h3><h4 id="Brute-Force">Brute Force</h4><p>Do as directed in question. For each element in the array, we find the maximum level of water it can trap after the rain, which is equal to the minimum of maximum height of bars on both the sides minus its own height.</p><h5 id="Alogrithm">Alogrithm</h5><ul><li>init <code>ans = 0</code></li><li>iterate height from left to right:<ul><li>init left_max = 0, right_max = 0</li><li>iterate from current element to the beginning: <code>left_max = max(left_max, height[j])</code></li><li>iterate from current element to the end: <code>right_max = max(right_max, height[j])</code></li><li>Update <code>ans += min(left_max, right_max) - height[i]</code></li></ul></li></ul><h5 id="Complexity">Complexity</h5><p>Time: <code>O(n^2)</code><br>Space: <code>O(1)</code></p><h4 id="Dynamic-Programming">Dynamic Programming</h4><p>In brute force, we iterate over the left and right parts again and again just to find the highest bar size upto that index. But, this could be stored. Voila, dynamic programming.</p><h5 id="Algorithm">Algorithm</h5><ul><li>Find maximum height of bar from the left end upto an index <code>i</code> in the array <code>left_max</code></li><li>Find maximum height of bar from the right end upto an index <code>i</code> in the array <code>right_max</code></li><li>Iterate over the height array and update ans</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">trap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> len = height.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">leftMax</span><span class="params">(len)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">rightMax</span><span class="params">(len)</span></span>;</span><br><span class="line">        </span><br><span class="line">        leftMax[<span class="number">0</span>] = height[<span class="number">0</span>];</span><br><span class="line">        rightMax[len<span class="number">-1</span>] = height[len<span class="number">-1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i&lt;len; i++) &#123;</span><br><span class="line">            leftMax[i]= <span class="built_in">max</span>(height[i], leftMax[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = len<span class="number">-2</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            rightMax[i] = <span class="built_in">max</span>(height[i], rightMax[i+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i&lt;height.<span class="built_in">size</span>()<span class="number">-1</span>; i++) &#123;</span><br><span class="line">            ans += <span class="built_in">max</span>(<span class="built_in">min</span>(leftMax[i<span class="number">-1</span>], rightMax[i+<span class="number">1</span>]) - height[i], <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="Complexity-2">Complexity</h6><p>Time: <code>O(n)</code><br>Space: <code>O(n)</code></p><h4 id="Monotonic-Stack">Monotonic Stack</h4><p>Instead of storing the largest bar upto an index as in <a href="#Dynamic-Programming">approach 2</a>, we can use stack to keep track of the bars that are bounded by longer bars and hence, may store water. Using the stack, we can do the calculations in only one iteration.</p><p>We keep a stack and iterate over the array. We add the index of the bar to the stack if bar is smaller than or equal to the bar at top of stack, which means that the current bar is bounded by the previous bar in the stack. If we found a bar longer than that at the top, we are sure that the bar at the top of the stack is bounded by the current bar and a previous bar in the stack, hence, we can pop it and add resulting trapped water to <code>ans</code>.</p><h5 id="Alogrithm-2">Alogrithm</h5><ul><li>Use stack to store the indices of the bars</li><li>Iterate the array:<ul><li>While stack is not empty and <code>height[current] &gt; height[st.top()]</code><ul><li>It means that the stack element can be popped. Pop the top element as <code>top</code></li><li>Find distance between the current element and the element at top of stack, which is to be filled: <code>distance = current - st.top() - 1</code></li><li>Find bounded_height: <code>bounded_height = min(height[current], height[st.top()]) - height[top]</code></li><li>Add the trapped water to answer: <code>ans += distance * bounded_height</code></li></ul></li><li>Push current index to stack</li><li>Move current to next position</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">trap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>, current = <span class="number">0</span>;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">    <span class="keyword">while</span> (current &lt; height.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>() &amp;&amp; height[current] &gt; height[st.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">            <span class="type">int</span> top = st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (st.<span class="built_in">empty</span>())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="type">int</span> distance = current - st.<span class="built_in">top</span>() - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> bounded_height = <span class="built_in">min</span>(height[current], height[st.<span class="built_in">top</span>()]) - height[top];</span><br><span class="line">            ans += distance * bounded_height;</span><br><span class="line">        &#125;</span><br><span class="line">        st.<span class="built_in">push</span>(current++);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Complexity-3">Complexity</h5><p>Time: <code>O(n)</code><br>Space: <code>O(n)</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Problems&quot;&gt;Problems&lt;/h3&gt;
&lt;p&gt;Given &lt;code&gt;n&lt;/code&gt; non-anegative integers representing an elevation map where the width of each bar is </summary>
      
    
    
    
    <category term="Leetcode" scheme="https://xunzhan.github.io/categories/Leetcode/"/>
    
    
    <category term="Array" scheme="https://xunzhan.github.io/tags/Array/"/>
    
    <category term="Dynamic Programming" scheme="https://xunzhan.github.io/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xunzhan.github.io/hello-world/"/>
    <id>https://xunzhan.github.io/hello-world/</id>
    <published>2022-04-12T05:18:33.000Z</published>
    <updated>2022-05-22T03:42:41.745Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="Techblog" scheme="https://xunzhan.github.io/categories/Techblog/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo Common Command</title>
    <link href="https://xunzhan.github.io/techblog/hexo-common-command/"/>
    <id>https://xunzhan.github.io/techblog/hexo-common-command/</id>
    <published>2022-04-12T05:18:33.000Z</published>
    <updated>2022-05-22T03:43:04.382Z</updated>
    
    <content type="html"><![CDATA[<p>Reference:<br><a href="https://hexo.io/">Hexo</a><br><a href="https://hexo.io/docs/">documentation</a><br><a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a><br><a href="https://github.com/hexojs/hexo/issues">GitHub</a></p><span id="more"></span><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><blockquote><p><strong><em>NOTE:</em></strong>  Generally, we use hexo clean &amp;&amp; hexo generate</p></blockquote><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Reference:&lt;br&gt;
&lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Techblog" scheme="https://xunzhan.github.io/categories/Techblog/"/>
    
    
    <category term="Hexo" scheme="https://xunzhan.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>离亭燕</title>
    <link href="https://xunzhan.github.io/li-ting-yan/"/>
    <id>https://xunzhan.github.io/li-ting-yan/</id>
    <published>2022-01-21T22:03:36.000Z</published>
    <updated>2022-06-18T21:49:37.486Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>设定： 史向荆高，有政高，部分场景器具名称使用秦时明月设定。<br>预警： 耽美向，作者正在长期服用中二抑制剂。</p></blockquote><h3 id="正文">正文</h3><p>【1】<br>“阿舟，睡了吗？有人找。”<br>背后急促的敲门声提醒着高渐离来人确实是来找自己的。更名改姓两年，但他还不能完全适应新的称呼。他应了声，匆忙合起琴谱塞进枕下再推开门。酒肆的老板在门口揣着手，有些艰难地在过道里腾出个位置。身披甲胄的将领走上前向屋内打量，陋室里唯一的烛火在风中苦撑，哆嗦着抖出点光亮到眼前这个瘦削的年轻人背上。他再次确认：“阁下是陈舟先生吗？”<br>高渐离点点头。他还未洗漱，大堂里的各种酒香浸满了衣服，与汗味揉杂在粗糙的面料下散发出一言难尽的气味。好在他早已习惯，无论是身为杂役的狼狈还是对方眉头中透出的猜疑。<br>所幸对方并没有继续犹豫，从怀中取出竹简递给他。简牍上的文字优雅，笔画里却刻着陌生。高渐离有些茫然地抬起头，将领这才意识到他不懂远道而来的文字，耐心地解释：“先生曲惊四座，文士权贵皆竞为客，陛下深赏先生之才，请先生至殿前奏。”<br>一分邀请，三分强求。</p><p>老板被突如其来的旨意吓到。精通音律的传闻始于他的店铺，他并不介意自己的伙计去揽些别的生意，但他的“生意”显然并不包括咸阳。东南方向曾经不起眼的国度，在世代君主的励精图治下逐渐崛起，成为燕国强劲的对手后已威胁至燕王迁都。如此受邀，更像是让他亲手将人送进虎穴。他支吾着试图挽留，话未出口便被将领的余光尽数挡回。</p><p>高渐离的脸上没有波澜，他问：“何时启程？”<br>“今晚。”<br>“在下收拾行囊还需片刻，请将军稍候。”<br>“有劳了。” 将领佩服他的从容，本以为要费上几番口舌，此刻威逼利诱的打算竟显得多余。这一路会省很多事，他转念又想，还是说这本就是那人所期望的？</p><p>【2】<br>“抬起头。”<br>第一次踏入宫殿的乐师闻言直起腰，单刀直入对上君王的视线，沉稳得像是前来述职的奉常。嬴政端详跪在中央的乐师，粗布衣里裹着具清瘦的躯体，他的经历被杂乱的针脚线头缝进去，即使他没有开口说起，也能感受到生活在他身上留下的印记。但他的眼睛在此刻显得格格不入，那里隐约正燃着火苗，转瞬间又化成月下井中的暗光，叫人辨不分明。不待嬴政细看，有侍从打断了他的观察并呈上乐师的木匣。乐师欠身去接，垂眸敛起锋锷，再抬头时，那双眼里只剩山温水软，黑色的瞳盛在泉里，倒是勾勒一片春色。</p><p>乐师推开盖板，架好经年沉寂的筑，提腕扫弦，泄出一串连音。像是一声轻叹，悄然熨平朝中大臣的私语，他不慌不忙地解释：“在下的筑久置匣中，柱移弦松，故而试音。” 拨正几处偏离后，仅有的嘈杂也销声匿迹。便见竹尺缠丝，拢起低沉的共鸣，如见暴雨将至前的乌云聚于上方，锁起肃静的空气，进而连喘息都变得不易。忽闻单音自和弦中跳脱，黑色的迷雾里坠落的并非雨滴，玄鸟纷至冲破阴翳，乌云的缺口尚不及愈合便被天光撑起，倾泻下大片金鳞。彼时颤音在尾声中荡开，云霄不断被拉向地面，白昼变得眩目，化作一片迷离。</p><p>头顶传来掌声，伴随着灼热的视线一并笼罩乐师：“先生以变徴起调，取雅正之势，复转羽音，呈空灵之意，可谓玄妙。”<br>筑本音色雄厚而多用于祭祀，于数拍间陡然变奏，利用指法与尺弦间的摩擦突破结构的限制，已经是闻所未闻，而此曲更上一层，于无形处见有形，不由得让人拍案。</p><p>君王诚心地赞，他自当恭敬地谢。高渐离说着那些连自己都不信的敬辞，规规矩矩叩谢圣恩，而思绪早已沉浸在余韵里难以脱身，他是酒保，而他也曾执尺。</p><p>散朝后，将领收到简短的指令。</p><p>“查。”嬴政的指节叩在记录乐师资料的竹简，乐师的目光太过熟悉，让他想起多年前的一位刺客。刺客带着失了方寸的同伙入宫，黔驴技穷也要佯装镇定。即使最终站在高台上的人是自己，刺客的眼睛仍就和他崭新的匕首一样，泛着利刃寒光。在他看来那是一场荒谬而徒劳的反抗，近几年虽频繁有人效仿，他却再未感受到这般厝火积薪的怒意。</p><p>乐师被安置在一处没有牌匾的宫苑。虽然弃置已久，有人提前修葺了几处破败，重漆四壁，置办用具，倒也干净整齐。他本想询问自己身处何地，与谁为邻，但得到“日后定为先生解惑，天色渐晚，还请留步”的回答后，只能看着宫门合起，有人在外面落了锁。</p><p>说不惶恐是假的。纵然在重拾筑琴的那一刻起就已经做好了最坏的打算，当亲眼所见冕旒下的那张脸，亲自跪在染着故友热血的地砖前，他仍感到不寒而栗。好在之后几天他并未被传召，只有零星的宫人出入住所，紧绷的弦也得以暂时歇息。</p><p>也许是投其所好，每每时至黄昏，就能听见从远处传来的歌舞声，只是在乐师看来，穿过层叠暮霭与重仞宫墙的，倒像一曲悠长的挽歌。寻回身份本该尽兴而奏，乐师反倒被什么心事烦扰，在寥寥几拍后便停了手，坐在筑旁出神。临近飧时，将领带着侍从前来掌灯，而后献上君王的邀请。</p><p>乐师被人领着穿过蜿蜒的幽径，抵达一处偏院，内室隐于栉比鳞次的翠竹里，竹叶中透出柔和的烛光，这是一个被星火点缀的冬夜。<br>君王负手而立，在窗前缓缓转过身。他只着玄端，褪去一身冕服时的凛然，问道：“夜半相邀，没有打搅先生吧？”<br>“得陛下赏识，幸莫甚焉。”乐师在席前放下琴匣，执尺抚弦。<br>落座的君王递上茶盏，示意并不着急演奏的开场：“先生做酒保多久了？”<br>“十年有余。”<br>“习筑可曾师从名家？”<br>“未曾。不过是闲来无事，酒后怡情。”<br>“只为怡情？”<br>“若能达至臻之境，自然也能以筑为笔绘山河，以曲为楫溯旧景。”<br>君王挑眉，仿佛听到什么趣事：“先生想看何种山河，又想回何日旧景？”<br>并非只有刀光剑影才算兵戎相见，这问题来得轻巧，却像把淬毒的刃，顺着经脉挑开肌肤，然后静待毒液流入四肢百骸。被划伤的乐师僵在原处，蜷在掌心的衣角溢出几条慌乱的皱褶。<br>嬴政觉察到他的回避，便由着乐师缄默良久。末了，大抵是想要调整姿势，乐师的袖子扫过茶盏，将其掀翻在地。他自觉失态，匆忙去捡，却被嬴政握住手腕：<br>“陈舟既已作沉舟，不如提笔扬楫做回自己，高先生……以为如何？”<br>预料之内的局面，君王已经给足了时间容他做出反应，高渐离此刻竟觉得安心。他抽回手摆好茶具，顺水推舟：“听凭陛下差遣。”</p><p>【3】<br>嬴政并不打算公开高渐离的情报，然而成为陛下的新宠注定难逃觊觎，被圈禁的御用乐师是荆轲挚友的消息一天之内就已经传得沸沸扬扬。</p><p>翌日，左右相国一改剑拔弩张的对峙，联合群臣上书对高渐离的惩治。嬴政看着长篇累牍的谏言觉得好笑，什么误国，什么宿仇，区区一个乐师竟让满朝文武避之不及。但两手一摊显然不是上策，他从中斡旋，撤除那些无中生有的罪名，妄图让乐师不至于方才解脱便又身陷囹圄。</p><p>到底是权钧力齐，两位相国做了充分的准备，早朝过半仍旧在为乐师的处罚拉扯。嬴政俯视喋喋不休的大臣，将竹简捏得直响。他讨厌无法掌控的棋局。</p><p>退朝的时候行刑刚刚结束。<br>还未踏入宫门便有刺鼻的气味扑面而来，呛得嬴政一阵干咳。忽略侍从先清理院内的请示，他快步跨过门槛，只见高渐离被反剪着双手押跪在庭院，他的脖颈被大力地按向地面，直逼燃烧着木柴和浆泥的铜盆。没有一丝挣扎，他用仅剩的力气维持身形，笔直的背脊撑起白衣扎进浓黑的烟火里，嬴政觉得心惊，飞蛾赴火也不过如此场景。</p><p>“高先生……” 嬴政蹲下来扶起高渐离，本想说些什么，看见乐师铺满烟灰的脸上被烤干的泪痕划出细碎的裂纹，几欲昏厥仍推开他的手臂哑声拒绝，他竟一时失语。</p><p>高渐离不知道自己是怎么回到枕衾间的，周围不见五指，但温暖而柔软的触感给了他很大的慰藉，便也不去纠结自己是梦是醒。身上的被褥逐渐变重，他想起这是与某人同寝时才有的待遇。<br>“大哥？” 他的声音经过炙烤后已经成了一块撕裂的腐木。<br>“嗯？还冷么？” 荆轲确认似的又将被角压紧。<br>“大哥……” 他的四肢疼痛僵硬，不得不维持着原先的姿势。<br>“我去给你烧水，别乱动了。” 荆轲边走边说：“叫你多穿点，真是一点话都不听，这下病了……你看看，我现在哪有大哥的样子……唉。”<br>他失笑，都这样了还要争个高低。<br>意识逐渐混沌，他向荆轲离开的门口张望。<br>那里空无一人，黑洞吞噬着周围并不断放大，最终扩张到他的全部视线。</p><p>晌午之后，高渐离终于转醒，虽然对他而言从此昼夜无别，他仍试图以其他方式感受光明。眼眶时而刺痛时而酸胀，他花费不少功夫摸索到窗边的矮凳，又唤宫女取出筑。</p><p>一切都要重新开始，自然也包括击筑。于是他披着暖阳，从最基础的指法尝试。他在简短的音律里走走停停，不知不觉被牵着回到师门的光景。</p><p>他的师傅虽在蓟城有些名气，却并不属于当时显赫的任何一个流派。这位年过花甲的老师既不教他韶派的雄浑中正，也不授他羽派的旖丽灵动，十二年的玉汝于成，督促他练的只一个“真”字，弦从心动，境携曲行。也是相似的窗边，老人提着他的腕带他感受轻重缓急，有流传的调，有现编的曲，都好听。</p><p>偶尔也有耐不住性子的时候，基本功的练习枯燥繁杂，远没有燕市的酒有吸引力。他在燕市还有朋友，肉铺的老板喜欢他的曲，经常叫上另一位听众约他小聚。陈年的烈云烧配上刚出炉的烤肉，作为回馈，他搬出新作。听众既没有食物招待，也不会乐器，但他不止是听。<br>不同于定居在蓟城的两位，听众走过很多地方。<br>“阿离，邯郸和朝歌有很多好玩的，等有机会了我一定带你去！”<br>“谢谢荆先生。”<br>“榆次也不错，” 荆轲挠挠头：“只是我在那里遇到很多高手还技不如人……也就不是很想回去。”<br>“天外有天，荆先生的剑术也绝非平庸之辈。” 荆轲的剑舞的确好看。<br>荆轲抚掌而笑：“改日阿离想学，我定倾囊相授。”<br>“那就先谢过荆先生了。”<br>往往这时，高渐离才像是真正的听众，听行侠仗义的故事，也听失意落魄的叹息。</p><p>当荆轲意识到自己说得太多时，通常酒已经喝完了。高渐离的曲还没弹，但是他的嘴闲不下来。他就品高渐离的曲，竟也言必有中。高渐离惊喜而欣慰，便又捻来些小调，间奏时荆轲不禁高歌几句，从《鹿鸣》唱到《桑扈》，最后竟与他唱起《黍离》。</p><p>高渐离自歌声里醒来，意识到声音的源头仍旧是远方，他皱着眉头把那些画面丢进风里。竹尺快凉透了，他渡过去些手心的温度，然后补上未完的练习。<br>荆轲话多，好在他全都愿意听。</p><p>【4】<br>待到太医允许他出门走动，高渐离已经习惯了昼夜无别。眼前的疼痛也为他带来几抹色彩，他边走边回忆，旧时的画面模模糊糊印在那片黑暗里，让他一时间分不清今夕何夕。宫女领他至中庭，不过几步后手臂就被骨节分明的手掌接管，他犹豫片刻，然后稳当当跪下去：“陛下。”<br>嬴政为他披上大氅，又将人托起：“高先生好些了吗？”<br>“陛下体恤，目盲而已，在下四感俱在，自当承蒙惠允。”<br>“气话，” 嬴政不在意他的僭越，扶他到庭中的鱼池边落座，鱼儿逃似的远离倒影，“高先生不见朝中的明争暗斗，自然不解朕的决定。只是这绕梁余音，朕不愿它囿于一隅之地。”<br>一隅之地？高渐离在心里冷笑，如今所处相比燕国，才更像一隅之地。<br>他忆起学成后的游历，素日古板的师傅想也没想地同意，他便去赴荆轲的约。二人同游邯郸朝歌，他在各处演奏，荆轲总是倚在不远处直至曲终。一路相伴，从籍籍无名到座无虚席，荆轲做他的挚友，走进他谱的每一首曲。<br>“渐离，有一个好消息，我要留在蓟城了。”<br>“很久吗？”<br>“也许是很久，”荆轲神神秘秘的凑近他耳边：“毕竟我马上就是太子府上卿嘛。”<br>“真的？” 他喜出望外：“那我先恭喜大哥！”<br>荆轲搂过他的肩，笑得愈加爽朗：“走，大哥带你去尝尝新酿的酒！”<br>那时的他以为是命运献上佳酿，敬一段历久弥坚的情谊，却未曾想到这不过是诀别前的一场饯行。</p><p>“高先生？” 嬴政料他出神，不难为他作出回应，识趣地起身：“风寒露重，早些休息。”<br>君王习惯于极目远眺，高台之上，江山为棋。然而乐师的心思敏感到足以捕捉常人无法察觉的情愫，析毫剖釐，再细心整理。他拾起君王看不见的落叶，也收藏的君王听不见的思念。他并不经常能听清君王的关心，数月里天翻地覆的变化已然来不及消化，旧日的场景又蜂拥而至，将思绪搅得混乱，他只能用长久的沉默平息。</p><p>【5】<br>宫里的时间过得飞快，高渐离在一声声祭乐里辨出元日的到来。<br>咸阳的冬天常是雨雪交加，不过走几步衣服便已浸湿大片。他不喜欢黏腻的触感，于是躲进屋里听雪。燕国的雪飒沓又泠冽，不似这般缠绵，刮过肌肤留一条直挺挺的伤口，总好过寒气慢条斯理的侵入。他刚想猫回被窝里，就听见宫女在屋外请安。<br>嬴政带着侍从进来，打断高渐离的行礼，他向乐师的手中递上温酒。<br>君王本不该至此。再自命清高也该懂得适可而止，他与对方寒暄然后被问及心愿。</p><p>半晌无言。<br>“大哥没有愿望吗？” 高渐离知道荆轲有事瞒着他，可荆轲不说他也不想开口烦扰。他只得换个话题等荆轲露馅。<br>“有啊，我想下个元日还和渐离一起过。”<br>“那，一言为定！”，这四个字他说的极响，就要赶上他高歌的音调。<br>“一言为定。”<br>他确信当时郑重地接过这份承诺，他也确信荆轲将这份承诺记在心里。只是这样的愿望对一个国家来说终究太过微不足道，山河破碎时没有任何东西能幸免于难。<br>他让君王在静默中等了许久，像是害怕降罪于自己的不识礼数，他从回忆里抽身，恭敬地递上心愿：<br>“在下愿千乘之国，海晏河清。”<br>不必纠结是否肺腑之言，高渐离明白，就算弹到十指皲裂，在君王的眼里不过是燕雀啼血。</p><h3 id="后记">后记</h3><p>是lofter荆高tag的新春活动，因为时（拖）间（延）仓（症）促（晚期）很多东西都没有完全理顺，看到错误请一定为我指出，感谢感谢！关于连着的两个四字成语，因为真的很喜欢忘川里高渐离的一二技能【弦动】和【携行】，就很固执地想要加进去。这里指路lofter @顽艳 太太的荆高政同人《鸩春》“情由音表，意出弦中”，相比之下这个用词太贴切了，除此以外整篇文章流畅又哀婉，非常值得一读。</p><p>关于高渐离在宋子城改名成为了什么其实我没有查到具体的史料，只是在百科关于“筑”这一词条的介绍里面有提到他改名成为“燕大”了。（这改得可真随意啊渐离）但是由于没有参考资料和他互相印证个人还是偏向于作为野史，这里也没有沿用，如果有人找到资料欢迎分享给我。</p><p>另外我也不确定筑是不是需要调音（筑在千年前已经失传），但是根据筑的构造来看（由整木剜制而成，大头是音箱，并有系弦柱；小头细长，并列五个弦孔），弦的松紧会随着温度使用时长而变化，进而影响音调。而且即使是现代的弦乐器都需要调音，所以我就这样假设了。</p><p>真是非常碎碎念了，最后关于为啥我总写一些青春伤痛文学，我自己也很疑惑，啥时候能有点进步呢QAQ</p><h3 id="参考">参考</h3><ol><li><a href="https://zhuanlan.zhihu.com/p/355965439">玄端</a></li><li><a href="https://zhuanlan.zhihu.com/p/69298364">先秦服饰</a></li><li><a href="https://zhuanlan.zhihu.com/p/138087961">先秦时期的乐文化说</a></li><li><a href="https://m.gmw.cn/toutiao/2020-11/20/content_34384331.htm?tt_group_id=6897007912346976775">曾侯乙墓现古代乐器“筑”</a></li><li><a href="http://blog.sina.com.cn/s/blog_4163757e0100fw2b.html">雅俗之争与汉代音乐机构之变迁</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;设定： 史向荆高，有政高，部分场景器具名称使用秦时明月设定。&lt;br&gt;
预警： 耽美向，作者正在长期服用中二抑制剂。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;正文&quot;&gt;正文&lt;/h3&gt;
&lt;p&gt;【1】&lt;br&gt;
“阿舟，睡了吗？有人找。”&lt;br&gt;</summary>
      
    
    
    
    <category term="Articles" scheme="https://xunzhan.github.io/categories/Articles/"/>
    
    
    <category term="荆高" scheme="https://xunzhan.github.io/tags/%E8%8D%86%E9%AB%98/"/>
    
    <category term="秦时明月" scheme="https://xunzhan.github.io/tags/%E7%A7%A6%E6%97%B6%E6%98%8E%E6%9C%88/"/>
    
  </entry>
  
  <entry>
    <title>1. Two Sum</title>
    <link href="https://xunzhan.github.io/leetcode/1-two-sum/"/>
    <id>https://xunzhan.github.io/leetcode/1-two-sum/</id>
    <published>2021-12-16T19:04:32.000Z</published>
    <updated>2022-09-25T22:14:39.071Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem">Problem</h3><p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return indices of the two numbers such that they add up to <code>target</code>.</p><p>You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the same element twice.</p><p>You can return the answer in any order.</p><h3 id="Examples">Examples</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,7,11,15], target = 9</span><br><span class="line">Output: [0,1]</span><br><span class="line">Output: Because nums[0] + nums[1] == 9, we return [0, 1].</span><br></pre></td></tr></table></figure><h4 id="Solutions">Solutions</h4><h5 id="One-pass-Hash-Table">One-pass Hash Table</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hash;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;nums.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> fn = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> ( hash.<span class="built_in">find</span>(fn) != hash.<span class="built_in">end</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(i);</span><br><span class="line">                ans.<span class="built_in">push_back</span>(hash[fn]);</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">            hash[nums[i]] = i;   </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Time: <code>O(n)</code><br>Space: <code>O(n)</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Problem&quot;&gt;Problem&lt;/h3&gt;
&lt;p&gt;Given an array of integers &lt;code&gt;nums&lt;/code&gt; and an integer &lt;code&gt;target&lt;/code&gt;, return indices of the two </summary>
      
    
    
    
    <category term="Leetcode" scheme="https://xunzhan.github.io/categories/Leetcode/"/>
    
    
    <category term="Array" scheme="https://xunzhan.github.io/tags/Array/"/>
    
    <category term="Hash Map" scheme="https://xunzhan.github.io/tags/Hash-Map/"/>
    
  </entry>
  
</feed>
